{% if GIT_DESCRIBE_NUMBER > '0' %}
{% set GIT_VERSION = GIT_DESCRIBE_TAG[1:] + '.post' + GIT_DESCRIBE_NUMBER %}
{% else %}
{% set GIT_VERSION = GIT_DESCRIBE_TAG[1:] %}
{% endif %}
{% set PKG_NAME = 'nanopb-helpers' %}
{% set MODULE_NAME = PKG_NAME.replace('-', '_') %}
{% set LIB_NAME = 'nanopb' %}
package:
  name: {{ PKG_NAME }}
  version: {{ GIT_VERSION }}

build:
  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  number: 0
  noarch: python
  script:
    # Copy `nanopb-helpers` C source and headers to Conda include directory.
    - python -c 
      "import os;
      from distutils.dir_util import copy_tree;
      import platformio_helpers as pioh;
      lib_src_dir = os.path.join('{{ SRC_DIR }}', 'lib', '{{ LIB_NAME }}');
      install_dir = pioh.conda_arduino_include_path().joinpath('{{ LIB_NAME }}');
      copy_tree(str(lib_src_dir), str(install_dir))
      "
    # Install source directory as Python package.
    - python setup.py install --single-version-externally-managed --record record.txt

requirements:
  build:
    - python {{ python }}
    - conda-helpers
    - platformio-helpers
    - six
    - path-helpers
    #: .. versionadded:: 0.12_py3
    - pip

  #: .. versionadded:: 0.12_py3
  pip:
    - nanopb

outputs:
  - name: {{ PKG_NAME }}-dev
    noarch: generic
    files:
      - share
  - name: {{ PKG_NAME }}
    noarch: python
    files:
      - Lib/site-packages/{{ MODULE_NAME }} # Windows
      - {{ PREFIX }}/lib/python{{ python }}/site-packages/{{ MODULE_NAME }}
    requirements:
      run:
        - python {{ python }}
        - {{ pin_subpackage(PKG_NAME + '-dev', max_pin='x.x') }}
        - conda-helpers
        - platformio-helpers
        - six
        - path-helpers
        - pip

      pip:
        - nanopb
    test:
      imports:
        - {{ MODULE_NAME }}

about:
  home: https://github.com/sci-bots/nanopb-helpers
  license: BSD-3

source:
  path: ..
#  git_url: ../